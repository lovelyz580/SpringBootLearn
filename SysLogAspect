package com.lovelyz.frame.aspect;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.lovelyz.frame.accessctro.MyLog;
import com.lovelyz.frame.entity.SysLog;
import com.lovelyz.frame.entity.User;
import com.lovelyz.frame.service.SysLogService;
import com.lovelyz.frame.service.UserService;
import com.lovelyz.frame.util.IpAdrressUtil;
import com.lovelyz.frame.util.JwtTokenUtil;
import com.lovelyz.frame.util.LogAopUtil;
import com.lovelyz.frame.vo.ResultVO;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.*;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import java.lang.reflect.Method;
import java.util.Arrays;
import java.util.Date;

/**
 * Created by Lovelyz
 * on 2019-07-31 16:38
 */
@Aspect
@Slf4j
@Component
public class SysLogAspect {

    @Autowired
    private SysLogService sysLogService;
    @Autowired
    private UserService userService;
    @Autowired
    private JwtTokenUtil jwtTokenUtil;

    private String tokenHeader = "Authorization";

    //定义切点 @Pointcut
//    操作日志
    @Pointcut("@annotation( com.lovelyz.frame.accessctro.MyLog)")
    public void logPoinCut() {
    }

    /**
     * 前置通知  一
     *
     * @param joinPoint
     */
    @Before("logPoinCut()")
    public void before(JoinPoint joinPoint) throws Exception {
        System.out.println("前置通知********* 一");
        Signature signature = joinPoint.getSignature();
        String method = signature.getDeclaringTypeName() + "." + signature.getName();
        log.info("-----------------------------------------------------");
        log.info("当前执行controller的方法:  " + method);
    }

    /**
     * 二
     * 切面 配置通知
     *
     * @param joinPoint
     * @throws Throwable
     */
    @AfterReturning(pointcut = "logPoinCut()", returning = "ret")
    public void AfterReturning(JoinPoint joinPoint, Object ret) throws Throwable {
        System.out.println("切面记录操作日志 ****二");
        HttpServletRequest request =
                ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
        HttpSession session = request.getSession();
        //保存日志
        SysLog sysLog = new SysLog();
        //从切面织入点处通过反射机制获取织入点处的方法
        MethodSignature signature = (MethodSignature) joinPoint.getSignature();
        //获取切入点所在的方法
        Method method = signature.getMethod();
        //获取操作
        MyLog myLog = method.getAnnotation(MyLog.class);
        if (myLog != null) {
            String value = myLog.value();
            sysLog.setOperation(value);//保存获取的操作
        }
        //获取请求的类名
        String className = joinPoint.getTarget().getClass().getName();
        //获取请求的方法名
        String methodName = method.getName();
        sysLog.setMethod(className + "." + methodName);
        //请求的参数
        // 打印请求内容
        log.info("===============请求内容===============");
        log.info("请求地址:" + request.getRequestURL().toString());
        log.info("请求方式:" + request.getMethod());
        log.info("请求类方法:" + joinPoint.getSignature());
        log.info("请求类方法参数:" + Arrays.toString(joinPoint.getArgs()));
        Object[] args = joinPoint.getArgs();
        String classType = joinPoint.getTarget().getClass().getName();
        Class<?> clazz = Class.forName(classType);
        String clazzName = clazz.getName();
        String methodNames = joinPoint.getSignature().getName(); // 获取方法名称
        // 获取参数名称和值
        StringBuffer sb = LogAopUtil.getNameAndArgs(this.getClass(), clazzName, methodNames, args);
        log.info("请求类方法参数名称和值：" + sb);
        log.info("===============请求内容===============");
//        请求的参数
        String arges = String.valueOf(sb);
        sysLog.setParams(arges);
//        返回参数
        ResultVO result = null;
        try {
            result = (ResultVO) ret;
            if (result != null && result.getCode() != 0) {
                log.error(result.getMsg());
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            log.info("返回参数：" + result);
            log.info("-----------------------------------------------------");
        }
        if (result != null) {
            sysLog.setRetparams(result.getMsg());
        }
        //获取用户名
        String authtoken = request.getHeader(this.tokenHeader);
        String userid = null;
        if (authtoken != null) {
            userid = jwtTokenUtil.getUsernameFromToken(authtoken);
        } else {
            JSONObject json = JSON.parseObject(arges);
            userid = (String) json.get("workNum");
        }
        User user = userService.getUserByUserName(userid);
        if (user != null) {
            sysLog.setUserName(user.getTrueName());
        }
        //获取用户ip地址
        sysLog.setIp(IpAdrressUtil.getIpAdrress(request));
        //设置时间
        sysLog.setCreateTime(new Date());
        //调用service保存SysLog实体类到数据库
        sysLogService.saveSysLog(sysLog);
    }

}
